import type { Metadata } from 'next';
import { Geist, Geist_Mono } from 'next/font/google';
import './globals.css';
import Header from '@/components/organisms/Header/Header';
import Footer from '@/components/organisms/Footer/Footer';

const geistSans = Geist({
  variable: '--font-geist-sans',
  subsets: ['latin'],
});

const geistMono = Geist_Mono({
  variable: '--font-geist-mono',
  subsets: ['latin'],
});

export const metadata: Metadata = {
  title: 'Create Next App',
  description: 'Generated by create next app',
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en" suppressHydrationWarning>
      <head>
        <script
          dangerouslySetInnerHTML={{
            __html: `
(function() {
  try {
    var theme = localStorage.getItem('theme') || 'light';
    var primary = localStorage.getItem('primaryColor') || '#6b7280';
    var root = document.documentElement;

    function lightenOrDarken(hex, percent) {
      var num = parseInt(hex.slice(1), 16);
      var r = (num >> 16) & 255;
      var g = (num >> 8) & 255;
      var b = num & 255;
      
      if (percent >= 0) {
        r = Math.round(r + (255 - r) * (percent / 100));
        g = Math.round(g + (255 - g) * (percent / 100));
        b = Math.round(b + (255 - b) * (percent / 100));
      } else {
        r = Math.round(r * (1 + percent / 100));
        g = Math.round(g * (1 + percent / 100));
        b = Math.round(b * (1 + percent / 100));
      }
      
      r = Math.min(255, Math.max(0, r));
      g = Math.min(255, Math.max(0, g));
      b = Math.min(255, Math.max(0, b));
      return "#" + ((1 << 24) + (r << 16) + (g << 8) + b).toString(16).slice(1);
    }

    var shadeNumbers = [50, 100, 200, 300, 400, 500, 600, 700, 800, 900, 950];
    var percents = [95, 80, 65, 50, 35, 20, 0, -15, -30, -45, -55];
    var baseShades = {};
    
    shadeNumbers.forEach(function(num, i) {
      baseShades['--primary-' + num] = lightenOrDarken(primary, percents[i]);
    });

    if (theme === 'dark') {
      var reversedShadeNumbers = shadeNumbers.slice().reverse();
      shadeNumbers.forEach(function(num, idx) {
        root.style.setProperty('--primary-' + num, baseShades['--primary-' + reversedShadeNumbers[idx]]);
      });
    } else {
      shadeNumbers.forEach(function(num) {
        root.style.setProperty('--primary-' + num, baseShades['--primary-' + num]);
      });
    }

    root.classList.remove('light', 'dark');
    root.classList.add(theme);
  } catch (e) {
    document.documentElement.classList.add('light');
  }
})();`,
          }}
        />
      </head>
      <body
        className={`${geistSans.variable} ${geistMono.variable} antialiased`}
      >
        <Header />
        {children}
        <Footer />
      </body>
    </html>
  );
}
